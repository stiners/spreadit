<!-- 
Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
See how the links are made in 'PostList.razor'.
-->
@page "/post/{id}"

@inject Services.ApiService ApiService
@inject NavigationManager Navigation
@using SpreaditApp.Common;

<PageTitle>Spreadit</PageTitle>
<a href="/">Back to front page</a>
<style>
div.contents {
  background-color: #f2f0eb;
  width: 600px;
  border: 2px solid #452d3d;
  padding: 10px;
  margin-top: 20px;
}
</style>

@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contents">
        <h4>@Post.Title</h4>
        <p><strong>Votes: @(Post.Upvotes + Post.Downvotes)</strong></p>
        <p>@Post.Content</p>
        <p>@Post.Date</p>
    </div>

    <div class="contents">
        <h4>Comments</h4>
        <table>
            <tr>
                <th>User</th>
                <th>Comment</th>
                <th colspan="3">Votes</th>
            </tr>
            @if (Comments?.Any() == true)
            {
                @foreach (var comment in Comments)
                {
                    <tr>
                        <!-- Checking if User is not null before accessing Username -->
                        <td>@(comment.User?.Username ?? "Anonymous")</td>
                        <td>@comment.Content</td>
                        <td>@(comment.Upvotes + comment.Downvotes)</td>
                        <td><button @onclick="() => Upvote(comment.Id)">Upvote</button></td>
                        <td><button @onclick="() => Downvote(comment.Id)">Downvote</button></td>
                        <td>@(comment.Date?.ToString("g") ?? "No Date")</td> <!-- Using ToString for formatting Date -->
                    </tr>
                }
            }
            else
            {
                <p>No comments available.</p>
            }
        </table>
    </div>

    <!-- This demonstrates how to pass in PostId to the component 'CreateComment'. See how 
         it is used in the file CreateComment.razor -->
    <CreateComment PostId=@PostId></CreateComment>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }
    public Comment[]? Comments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await ApiService.GetPost(PostId);
        Comments = Post?.Comments?.ToArray() ?? Array.Empty<Comment>();
    }

    private async void Upvote(int id)
    {
        var updatedComment = await ApiService.UpvoteComment(id);
        
        if (updatedComment != null)
        {
            Console.WriteLine("Comment upvoted successfully!");
        }

        UpdateCommentInList(updatedComment);
        StateHasChanged();
    }

    private async void Downvote(int id)
    {
        var updatedComment = await ApiService.DownvoteComment(id);

        if (updatedComment != null)
        {
            Console.WriteLine("Comment downvoted successfully!");
        }

        UpdateCommentInList(updatedComment);
        StateHasChanged();
    }
    
    private void UpdateCommentInList(Comment updatedComment)
    {
        var index = Array.FindIndex(Comments, p => p.Id == updatedComment.Id);
        if (index != -1)
        {
            Comments[index] = updatedComment;
        }
    }
}